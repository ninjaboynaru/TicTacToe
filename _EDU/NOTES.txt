TIC-TAC-TOE Challenge completed for Free Code Camp

HTML structure is composed of "Screens" where as each screen contains a component
of the game, ie. "Start Screen" has the start button, "Shape Screen" allows the player
to select their screen, "Play Screen" contains the actual tic-tac-toe baord.

JS is composed of 2 files, the "index.js" file wich contains the core code and
the "tictactoeAI.js" file wich contains the AI functions.

_________________________________________________________________________________

"index.js" 
Contains 3 objects for managing the core funcionality of the game
- "gameInfo" contains core game information such as the scores the number of players aswell
	as whose turn it is and weather or not the game is over.

- "screens" for managing the swiching and disabling screens.

- "gameBoard" contains the physical game board in the form of a 3x3 array [[] [] []] where
	each sub array is a row containing the <td></td> elements of that row.
	Also contains methods to check if there are 3 in a row or if the board is full.

- Other auxilary functions such as checking if the game is won, displaying the end game
	message, the event for a box beaing clicked etc...

_________________________________________________________________________________

"tictactoeAI.js"
Core functions are "MoveValue(..)" and "GetAIMove(..)" accompanied by helper functions to
determin if there is a winner or if the baord is full.

"MoveValue(xCord, yCord, pureBoard, aiCharacter, playerCharacter, depth, isAITurn)"
- Is actualy a Minimax function. 
- The move is played on the xCord and yCord of the board.
- The "EvaluateBoard(..)" and "MovesLeft(..)" functions are called on the board 
to determine if there is a win or loss or if the board is full.
- If there is a win or loss or the baord is full, either 1,-1, or 0 are returned.
- If not then the function goes through every possible sub move and on each one
calls "MoveValue(..)"(itself) on those sub moves.

"pureBoard" parameter is a 3x3 array of strings [[] [] []] where sub array is a row on
the game baord and the contents of the row are strings "X" "O" or "".
"gameBoard.GetPureBoard()" supplies the pureBoard to the AI.

_________________________________________________________________________________

See TECHNICAL_NOTES word file for strange observations and notes. Or don't.






